// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Uncreated.Warfare.Database;

namespace Uncreated.Warfare.Migrations
{
    [DbContext(typeof(WarfareDbContext))]
    [Migration("20251022060735_AddIsSeedingToGameRecord")]
    partial class AddIsSeedingToGameRecord
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasCharSet("utf8mb4", DelegationModes.ApplyToColumns)
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.17");

            modelBuilder.Entity("Uncreated.Warfare.Models.Authentication.HomebaseAuthenticationKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AuthKey")
                        .IsRequired()
                        .HasColumnType("char(32)");

                    b.Property<string>("Identity")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)");

                    b.Property<DateTime>("LastConnectTime")
                        .HasColumnType("datetime");

                    b.Property<byte>("Region")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("Id");

                    b.ToTable("homebase_auth_keys");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Factions.Faction", b =>
                {
                    b.Property<uint>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("pk");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("Emoji")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("FlagImageUrl")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("HexColor")
                        .IsRequired()
                        .HasColumnType("char(6)");

                    b.Property<string>("InternalName")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("Id");

                    b.Property<string>("KitPrefix")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("ShortName")
                        .HasMaxLength(24)
                        .HasColumnType("varchar(24)");

                    b.Property<int?>("SpriteIndex")
                        .HasColumnType("int");

                    b.Property<uint?>("UnarmedKitId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("UnarmedKitId");

                    b.HasKey("Key");

                    b.HasIndex("UnarmedKitId");

                    b.ToTable("factions");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Factions.FactionAsset", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("pk");

                    b.Property<string>("Asset")
                        .IsRequired()
                        .HasColumnType("char(32)");

                    b.Property<uint>("FactionId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("Faction");

                    b.Property<string>("Redirect")
                        .IsRequired()
                        .HasColumnType("enum('Shirt','Pants','Vest','Hat','Mask','Backpack','Glasses','AmmoSupply','BuildSupply','RallyPoint','Radio','AmmoBag','AmmoCrate','RepairStation','Bunker','VehicleBay','EntrenchingTool','UAV','RepairStationBuilt','AmmoCrateBuilt','BunkerBuilt','Cache','RadioDamaged','LaserDesignator','MapTackFlag')");

                    b.Property<string>("VariantKey")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("Id");

                    b.HasIndex("FactionId");

                    b.ToTable("faction_assets");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Factions.FactionLocalization", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("pk");

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<uint>("FactionId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("Faction");

                    b.Property<uint>("LanguageId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("Language");

                    b.Property<string>("Name")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("ShortName")
                        .HasMaxLength(24)
                        .HasColumnType("varchar(24)");

                    b.HasKey("Id");

                    b.HasIndex("FactionId");

                    b.HasIndex("LanguageId");

                    b.ToTable("faction_translations");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.GameData.GameRecord", b =>
                {
                    b.Property<ulong>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime?>("EndTimestamp")
                        .HasColumnType("datetime");

                    b.Property<string>("Gamemode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsSeeding")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Map")
                        .HasColumnType("int");

                    b.Property<byte>("Region")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int>("Season")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTimestamp")
                        .HasColumnType("datetime");

                    b.Property<uint?>("WinnerFactionId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("Winner");

                    b.HasKey("GameId");

                    b.HasIndex("WinnerFactionId");

                    b.ToTable("stats_games");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.GameData.SessionRecord", b =>
                {
                    b.Property<ulong>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime?>("EndedTimestamp")
                        .HasColumnType("datetime")
                        .HasColumnName("EndedTimestampUTC");

                    b.Property<uint?>("FactionId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("Faction");

                    b.Property<bool>("FinishedGame")
                        .HasColumnType("tinyint(1)");

                    b.Property<ulong>("GameId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("Game");

                    b.Property<uint?>("KitId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("Kit");

                    b.Property<string>("KitName")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.Property<double>("LengthSeconds")
                        .HasColumnType("double");

                    b.Property<int>("MapId")
                        .HasColumnType("int")
                        .HasColumnName("Map");

                    b.Property<ulong?>("NextSessionId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("NextSession");

                    b.Property<ulong?>("PreviousSessionId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("PreviousSession");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int")
                        .HasColumnName("Season");

                    b.Property<ulong?>("SquadLeader")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("SquadLeader");

                    b.Property<string>("SquadName")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("SquadName");

                    b.Property<bool>("StartedGame")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("StartedTimestamp")
                        .HasColumnType("datetime")
                        .HasColumnName("StartedTimestampUTC");

                    b.Property<ulong>("Steam64")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("Steam64");

                    b.Property<int>("Team")
                        .HasColumnType("int");

                    b.Property<bool>("UnexpectedTermination")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("SessionId");

                    b.HasIndex("FactionId");

                    b.HasIndex("GameId");

                    b.HasIndex("KitId");

                    b.HasIndex("MapId");

                    b.HasIndex("NextSessionId");

                    b.HasIndex("PreviousSessionId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("SquadLeader");

                    b.HasIndex("Steam64");

                    b.ToTable("stats_sessions");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.ItemWhitelist", b =>
                {
                    b.Property<int>("PrimaryKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pk");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Item")
                        .IsRequired()
                        .HasColumnType("char(32)");

                    b.HasKey("PrimaryKey");

                    b.ToTable("item_whitelists");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.Bundles.EliteBundle", b =>
                {
                    b.Property<uint>("PrimaryKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("pk");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<uint?>("FactionId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("Faction");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.HasKey("PrimaryKey");

                    b.HasIndex("FactionId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("kits_bundles");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.Bundles.KitEliteBundle", b =>
                {
                    b.Property<uint>("KitId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("Kit");

                    b.Property<uint>("BundleId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("Bundle");

                    b.HasKey("KitId", "BundleId");

                    b.HasIndex("BundleId");

                    b.ToTable("kits_bundle_items");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.KitAccess", b =>
                {
                    b.Property<uint>("KitId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("Kit");

                    b.Property<ulong>("Steam64")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("Steam64");

                    b.Property<string>("AccessType")
                        .IsRequired()
                        .HasColumnType("enum('Unknown','Credits','Event','Purchase','QuestReward')");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime")
                        .HasColumnName("GivenAt");

                    b.HasKey("KitId", "Steam64");

                    b.HasIndex("Steam64");

                    b.ToTable("kits_access");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.KitDelay", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("pk");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<uint>("KitId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("Kit");

                    b.Property<uint?>("KitModelPrimaryKey")
                        .HasColumnType("int unsigned");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("KitModelPrimaryKey");

                    b.ToTable("kits_delays");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.KitFavorite", b =>
                {
                    b.Property<uint>("KitId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("Kit");

                    b.Property<ulong>("Steam64")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("Steam64");

                    b.HasKey("KitId", "Steam64");

                    b.HasIndex("Steam64");

                    b.ToTable("kits_favorites");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.KitFilteredFaction", b =>
                {
                    b.Property<uint>("KitId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("Kit");

                    b.Property<uint>("FactionId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("Faction");

                    b.HasKey("KitId", "FactionId");

                    b.HasIndex("FactionId");

                    b.ToTable("kits_faction_filters");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.KitFilteredMap", b =>
                {
                    b.Property<uint>("KitId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("Kit");

                    b.Property<uint>("Map")
                        .HasColumnType("int unsigned");

                    b.HasKey("KitId", "Map");

                    b.ToTable("kits_map_filters");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.KitHotkey", b =>
                {
                    b.Property<uint>("KitId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("Kit");

                    b.Property<byte>("Slot")
                        .HasColumnType("tinyint unsigned");

                    b.Property<ulong>("Steam64")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("Steam64");

                    b.Property<string>("Item")
                        .HasColumnType("char(32)");

                    b.Property<string>("Page")
                        .IsRequired()
                        .HasColumnType("enum('Primary','Secondary','Hands','Backpack','Vest','Shirt','Pants','Storage','Area')");

                    b.Property<string>("Redirect")
                        .HasColumnType("enum('Shirt','Pants','Vest','Hat','Mask','Backpack','Glasses','AmmoSupply','BuildSupply','RallyPoint','Radio','AmmoBag','AmmoCrate','RepairStation','Bunker','VehicleBay','EntrenchingTool','UAV','RepairStationBuilt','AmmoCrateBuilt','BunkerBuilt','Cache','RadioDamaged','LaserDesignator','MapTackFlag')");

                    b.Property<byte>("X")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("Y")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("KitId", "Slot", "Steam64");

                    b.HasIndex("Steam64");

                    b.ToTable("kits_hotkeys");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.KitItemModel", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("pk");

                    b.Property<byte?>("Amount")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("ClothingSlot")
                        .HasColumnType("enum('Shirt','Pants','Vest','Hat','Mask','Backpack','Glasses')");

                    b.Property<string>("Item")
                        .HasColumnType("char(32)");

                    b.Property<uint>("KitId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("Kit");

                    b.Property<byte[]>("Metadata")
                        .HasMaxLength(18)
                        .HasColumnType("varbinary(18)");

                    b.Property<string>("Page")
                        .HasColumnType("enum('Primary','Secondary','Hands','Backpack','Vest','Shirt','Pants','Storage','Area')");

                    b.Property<string>("Redirect")
                        .HasColumnType("enum('Shirt','Pants','Vest','Hat','Mask','Backpack','Glasses','AmmoSupply','BuildSupply','RallyPoint','Radio','AmmoBag','AmmoCrate','RepairStation','Bunker','VehicleBay','EntrenchingTool','UAV','RepairStationBuilt','AmmoCrateBuilt','BunkerBuilt','Cache','RadioDamaged','LaserDesignator','MapTackFlag')");

                    b.Property<string>("RedirectVariant")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<byte?>("Rotation")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte?>("X")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte?>("Y")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("KitId");

                    b.ToTable("kits_items");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.KitLayoutTransformation", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("pk");

                    b.Property<uint>("KitId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("Kit");

                    b.Property<string>("NewPage")
                        .IsRequired()
                        .HasColumnType("enum('Primary','Secondary','Hands','Backpack','Vest','Shirt','Pants','Storage','Area')");

                    b.Property<byte>("NewRotation")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("NewX")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("NewY")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("OldPage")
                        .IsRequired()
                        .HasColumnType("enum('Primary','Secondary','Hands','Backpack','Vest','Shirt','Pants','Storage','Area')");

                    b.Property<byte>("OldX")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("OldY")
                        .HasColumnType("tinyint unsigned");

                    b.Property<ulong>("Steam64")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("Steam64");

                    b.HasKey("Id");

                    b.HasIndex("KitId");

                    b.HasIndex("Steam64");

                    b.ToTable("kits_layouts");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.KitModel", b =>
                {
                    b.Property<uint>("PrimaryKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("pk");

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasColumnType("enum('Infantry','Armor','Airforce','SpecOps','Navy')");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("enum('Unarmed','Squadleader','Rifleman','Medic','Breacher','AutomaticRifleman','Grenadier','MachineGunner','LAT','HAT','Marksman','Sniper','APRifleman','CombatEngineer','Crewman','Pilot','SpecOps')");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<ulong>("Creator")
                        .HasColumnType("bigint unsigned");

                    b.Property<int>("CreditCost")
                        .HasColumnType("int");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("FactionFilterIsWhitelist")
                        .HasColumnType("tinyint(1)");

                    b.Property<uint?>("FactionId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("Faction");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime>("LastEditedAt")
                        .HasColumnType("datetime");

                    b.Property<ulong>("LastEditor")
                        .HasColumnType("bigint unsigned");

                    b.Property<bool>("MapFilterIsWhitelist")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("MinRequiredSquadMembers")
                        .HasColumnType("int");

                    b.Property<decimal>("PremiumCost")
                        .HasColumnType("decimal(65,30)");

                    b.Property<float>("RequestCooldown")
                        .HasColumnType("float");

                    b.Property<bool>("RequiresNitro")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("RequiresSquad")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Season")
                        .HasColumnType("int");

                    b.Property<string>("SquadLevel")
                        .IsRequired()
                        .HasColumnType("enum('Member','Commander')");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("enum('Public','Elite','Special','Loadout','Template')");

                    b.Property<string>("Weapons")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.HasKey("PrimaryKey");

                    b.HasIndex("FactionId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("kits");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.KitSkillset", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("pk");

                    b.Property<uint>("KitId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("Kit");

                    b.Property<byte>("Level")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("Level");

                    b.Property<string>("Skill")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("enum('OVERKILL','SHARPSHOOTER','DEXTERITY','CARDIO','EXERCISE','DIVING','PARKOUR','SNEAKYBEAKY','VITALITY','IMMUNITY','TOUGHNESS','STRENGTH','WARMBLOODED','SURVIVAL','HEALING','CRAFTING','OUTDOORS','COOKING','FISHING','AGRICULTURE','MECHANIC','ENGINEER')")
                        .HasColumnName("Skill");

                    b.HasKey("Id");

                    b.HasIndex("KitId");

                    b.ToTable("kits_skillsets");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.KitTranslation", b =>
                {
                    b.Property<uint>("KitId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("Kit");

                    b.Property<uint>("LanguageId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("Language");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("KitId", "LanguageId");

                    b.ToTable("kits_sign_text");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.KitUnlockRequirement", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("pk");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<uint>("KitId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("Kit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("KitId");

                    b.ToTable("kits_unlock_requirements");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Localization.LanguageAlias", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("pk");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<uint>("LanguageId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("Language");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("lang_aliases");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Localization.LanguageContributor", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("pk");

                    b.Property<ulong>("Contributor")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("Contributor");

                    b.Property<uint>("LanguageId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("Language");

                    b.HasKey("Id");

                    b.HasIndex("Contributor");

                    b.HasIndex("LanguageId");

                    b.ToTable("lang_credits");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Localization.LanguageCulture", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("pk");

                    b.Property<string>("CultureCode")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)");

                    b.Property<uint>("LanguageId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("Language");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("lang_cultures");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Localization.LanguageInfo", b =>
                {
                    b.Property<uint>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("pk");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("char(5)");

                    b.Property<string>("DefaultCultureCode")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("FallbackTranslationLanguageCode")
                        .HasColumnType("char(5)");

                    b.Property<bool>("HasTranslationSupport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("NativeName")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("RequiresIMGUI")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("SteamLanguageName")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<bool>("SupportsPluralization")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Key");

                    b.ToTable("lang_info");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Localization.LanguagePreferences", b =>
                {
                    b.Property<ulong>("Steam64")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("Steam64");

                    b.Property<string>("Culture")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)");

                    b.Property<uint>("LanguageId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("Language");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("TimeZone")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<bool>("UseCultureForCommandInput")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("UseCultureForCmdInput");

                    b.HasKey("Steam64");

                    b.HasIndex("LanguageId");

                    b.ToTable("lang_preferences");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Seasons.MapData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ReleasedSeasonId")
                        .HasColumnType("int")
                        .HasColumnName("SeasonReleased");

                    b.Property<uint>("Team1FactionId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("Team1Faction");

                    b.Property<uint>("Team2FactionId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("Team2Faction");

                    b.Property<ulong?>("WorkshopId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("ReleasedSeasonId");

                    b.HasIndex("Team1FactionId");

                    b.HasIndex("Team2FactionId");

                    b.ToTable("maps");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Seasons.MapWorkshopDependency", b =>
                {
                    b.Property<int>("MapId")
                        .HasColumnType("int")
                        .HasColumnName("Map");

                    b.Property<ulong>("WorkshopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("MapId", "WorkshopId");

                    b.ToTable("maps_dependencies");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Seasons.SeasonData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReleaseTimestamp")
                        .HasColumnType("datetime")
                        .HasColumnName("ReleaseTimestampUTC");

                    b.HasKey("Id");

                    b.ToTable("seasons");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Stats.AidRecord", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<float>("Health")
                        .HasColumnType("float");

                    b.Property<ulong?>("Instigator")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("Instigator");

                    b.Property<float?>("InstigatorPositionX")
                        .HasColumnType("float");

                    b.Property<float?>("InstigatorPositionY")
                        .HasColumnType("float");

                    b.Property<float?>("InstigatorPositionZ")
                        .HasColumnType("float");

                    b.Property<ulong?>("InstigatorSessionId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("InstigatorSession");

                    b.Property<bool>("IsRevive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Item")
                        .IsRequired()
                        .HasColumnType("char(32)");

                    b.Property<float>("PositionX")
                        .HasColumnType("float");

                    b.Property<float>("PositionY")
                        .HasColumnType("float");

                    b.Property<float>("PositionZ")
                        .HasColumnType("float");

                    b.Property<ulong?>("SessionId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("Session");

                    b.Property<ulong?>("Steam64")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("Steam64");

                    b.Property<byte>("Team")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime")
                        .HasColumnName("TimestampUTC");

                    b.HasKey("Id");

                    b.HasIndex("Instigator");

                    b.HasIndex("InstigatorSessionId");

                    b.HasIndex("SessionId");

                    b.HasIndex("Steam64");

                    b.HasIndex("Team");

                    b.ToTable("stats_aid_records");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Stats.DamageRecord", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Cause")
                        .IsRequired()
                        .HasColumnType("enum('BLEEDING','BONES','FREEZING','BURNING','FOOD','WATER','GUN','MELEE','ZOMBIE','ANIMAL','SUICIDE','KILL','INFECTION','PUNCH','BREATH','ROADKILL','VEHICLE','GRENADE','SHRED','LANDMINE','ARENA','MISSILE','CHARGE','SPLASH','SENTRY','ACID','BOULDER','BURNER','SPIT','SPARK','37')");

                    b.Property<float>("Damage")
                        .HasColumnType("float");

                    b.Property<float?>("Distance")
                        .HasColumnType("float");

                    b.Property<ulong?>("Instigator")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("Instigator");

                    b.Property<float?>("InstigatorPositionX")
                        .HasColumnType("float");

                    b.Property<float?>("InstigatorPositionY")
                        .HasColumnType("float");

                    b.Property<float?>("InstigatorPositionZ")
                        .HasColumnType("float");

                    b.Property<ulong?>("InstigatorSessionId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("InstigatorSession");

                    b.Property<bool>("IsInjure")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsInjured")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSuicide")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsTeamkill")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Limb")
                        .IsRequired()
                        .HasColumnType("enum('LEFT_FOOT','LEFT_LEG','RIGHT_FOOT','RIGHT_LEG','LEFT_HAND','LEFT_ARM','RIGHT_HAND','RIGHT_ARM','LEFT_BACK','RIGHT_BACK','LEFT_FRONT','RIGHT_FRONT','SPINE','SKULL')");

                    b.Property<float>("PositionX")
                        .HasColumnType("float");

                    b.Property<float>("PositionY")
                        .HasColumnType("float");

                    b.Property<float>("PositionZ")
                        .HasColumnType("float");

                    b.Property<string>("PrimaryAsset")
                        .HasColumnType("char(32)");

                    b.Property<ulong?>("RelatedPlayer")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("RelatedPlayer");

                    b.Property<float?>("RelatedPlayerPositionX")
                        .HasColumnType("float");

                    b.Property<float?>("RelatedPlayerPositionY")
                        .HasColumnType("float");

                    b.Property<float?>("RelatedPlayerPositionZ")
                        .HasColumnType("float");

                    b.Property<ulong?>("RelatedPlayerSessionId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("RelatedPlayerSession");

                    b.Property<string>("SecondaryAsset")
                        .HasColumnType("char(32)");

                    b.Property<ulong?>("SessionId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("Session");

                    b.Property<ulong?>("Steam64")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("Steam64");

                    b.Property<byte>("Team")
                        .HasColumnType("tinyint unsigned");

                    b.Property<float>("TimeDeployedSeconds")
                        .HasColumnType("float");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime")
                        .HasColumnName("TimestampUTC");

                    b.Property<string>("Vehicle")
                        .HasColumnType("char(32)");

                    b.HasKey("Id");

                    b.HasIndex("Instigator");

                    b.HasIndex("InstigatorSessionId");

                    b.HasIndex("RelatedPlayer");

                    b.HasIndex("RelatedPlayerSessionId");

                    b.HasIndex("SessionId");

                    b.HasIndex("Steam64");

                    b.HasIndex("Team");

                    b.ToTable("stats_damage");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Stats.DeathRecord", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("DeathCause")
                        .IsRequired()
                        .HasColumnType("enum('BLEEDING','BONES','FREEZING','BURNING','FOOD','WATER','GUN','MELEE','ZOMBIE','ANIMAL','SUICIDE','KILL','INFECTION','PUNCH','BREATH','ROADKILL','VEHICLE','GRENADE','SHRED','LANDMINE','ARENA','MISSILE','CHARGE','SPLASH','SENTRY','ACID','BOULDER','BURNER','SPIT','SPARK','37')");

                    b.Property<string>("DeathMessage")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<float?>("Distance")
                        .HasColumnType("float");

                    b.Property<ulong?>("Instigator")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("Instigator");

                    b.Property<float?>("InstigatorPositionX")
                        .HasColumnType("float");

                    b.Property<float?>("InstigatorPositionY")
                        .HasColumnType("float");

                    b.Property<float?>("InstigatorPositionZ")
                        .HasColumnType("float");

                    b.Property<ulong?>("InstigatorSessionId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("InstigatorSession");

                    b.Property<bool>("IsBleedout")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSuicide")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsTeamkill")
                        .HasColumnType("tinyint(1)");

                    b.Property<ulong?>("KillShotId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("KillShot");

                    b.Property<float>("PositionX")
                        .HasColumnType("float");

                    b.Property<float>("PositionY")
                        .HasColumnType("float");

                    b.Property<float>("PositionZ")
                        .HasColumnType("float");

                    b.Property<string>("PrimaryAsset")
                        .HasColumnType("char(32)");

                    b.Property<ulong?>("RelatedPlayer")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("RelatedPlayer");

                    b.Property<float?>("RelatedPlayerPositionX")
                        .HasColumnType("float");

                    b.Property<float?>("RelatedPlayerPositionY")
                        .HasColumnType("float");

                    b.Property<float?>("RelatedPlayerPositionZ")
                        .HasColumnType("float");

                    b.Property<ulong?>("RelatedPlayerSessionId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("RelatedPlayerSession");

                    b.Property<string>("SecondaryAsset")
                        .HasColumnType("char(32)");

                    b.Property<ulong?>("SessionId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("Session");

                    b.Property<ulong?>("Steam64")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("Steam64");

                    b.Property<byte>("Team")
                        .HasColumnType("tinyint unsigned");

                    b.Property<float>("TimeDeployedSeconds")
                        .HasColumnType("float");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime")
                        .HasColumnName("TimestampUTC");

                    b.Property<string>("Vehicle")
                        .HasColumnType("char(32)");

                    b.HasKey("Id");

                    b.HasIndex("Instigator");

                    b.HasIndex("InstigatorSessionId");

                    b.HasIndex("KillShotId")
                        .IsUnique();

                    b.HasIndex("RelatedPlayer");

                    b.HasIndex("RelatedPlayerSessionId");

                    b.HasIndex("SessionId");

                    b.HasIndex("Steam64");

                    b.HasIndex("Team");

                    b.ToTable("stats_deaths");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Stats.FobItemBuilderRecord", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("FobItemId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("FobItem");

                    b.Property<float>("Hits")
                        .HasColumnType("float");

                    b.Property<float>("PositionX")
                        .HasColumnType("float");

                    b.Property<float>("PositionY")
                        .HasColumnType("float");

                    b.Property<float>("PositionZ")
                        .HasColumnType("float");

                    b.Property<double>("Responsibility")
                        .HasColumnType("double");

                    b.Property<ulong?>("SessionId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("Session");

                    b.Property<ulong?>("Steam64")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("Steam64");

                    b.Property<byte>("Team")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime")
                        .HasColumnName("TimestampUTC");

                    b.HasKey("Id");

                    b.HasIndex("FobItemId");

                    b.HasIndex("SessionId");

                    b.HasIndex("Steam64");

                    b.HasIndex("Team");

                    b.ToTable("stats_fob_items_builders");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Stats.FobItemRecord", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime?>("BuiltAt")
                        .HasColumnType("datetime")
                        .HasColumnName("BuiltAtUTC");

                    b.Property<DateTime?>("DestroyedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("DestroyedAtUTC");

                    b.Property<bool>("DestroyedByRoundEnd")
                        .HasColumnType("tinyint(1)");

                    b.Property<ulong?>("FobId")
                        .IsRequired()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("Fob");

                    b.Property<float>("FobItemAngleX")
                        .HasColumnType("float");

                    b.Property<float>("FobItemAngleY")
                        .HasColumnType("float");

                    b.Property<float>("FobItemAngleZ")
                        .HasColumnType("float");

                    b.Property<float>("FobItemPositionX")
                        .HasColumnType("float");

                    b.Property<float>("FobItemPositionY")
                        .HasColumnType("float");

                    b.Property<float>("FobItemPositionZ")
                        .HasColumnType("float");

                    b.Property<ulong?>("Instigator")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("Instigator");

                    b.Property<float?>("InstigatorPositionX")
                        .HasColumnType("float");

                    b.Property<float?>("InstigatorPositionY")
                        .HasColumnType("float");

                    b.Property<float?>("InstigatorPositionZ")
                        .HasColumnType("float");

                    b.Property<ulong?>("InstigatorSessionId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("InstigatorSession");

                    b.Property<string>("Item")
                        .HasColumnType("char(32)");

                    b.Property<int>("PlayerKills")
                        .HasColumnType("int");

                    b.Property<float>("PositionX")
                        .HasColumnType("float");

                    b.Property<float>("PositionY")
                        .HasColumnType("float");

                    b.Property<float>("PositionZ")
                        .HasColumnType("float");

                    b.Property<string>("PrimaryAsset")
                        .HasColumnType("char(32)");

                    b.Property<string>("SecondaryAsset")
                        .HasColumnType("char(32)");

                    b.Property<ulong?>("SessionId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("Session");

                    b.Property<ulong?>("Steam64")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("Steam64");

                    b.Property<byte>("Team")
                        .HasColumnType("tinyint unsigned");

                    b.Property<bool>("Teamkilled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime")
                        .HasColumnName("TimestampUTC");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("enum('Fob','AmmoCrate','RepairStation','Fortification','Emplacement')");

                    b.Property<double>("UseTimeSeconds")
                        .HasColumnType("double");

                    b.Property<int>("VehicleKills")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FobId");

                    b.HasIndex("Instigator");

                    b.HasIndex("InstigatorSessionId");

                    b.HasIndex("SessionId");

                    b.HasIndex("Steam64");

                    b.HasIndex("Team");

                    b.ToTable("stats_fob_items");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Stats.FobRecord", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<int>("AmmoCratesBuilt")
                        .HasColumnType("int");

                    b.Property<int>("AmmoCratesDestroyed")
                        .HasColumnType("int");

                    b.Property<int>("AmmoLoaded")
                        .HasColumnType("int");

                    b.Property<int>("AmmoSpent")
                        .HasColumnType("int");

                    b.Property<int>("BuildLoaded")
                        .HasColumnType("int");

                    b.Property<int>("BuildSpent")
                        .HasColumnType("int");

                    b.Property<int>("BunkersBuilt")
                        .HasColumnType("int");

                    b.Property<int>("BunkersDestroyed")
                        .HasColumnType("int");

                    b.Property<int>("DeploymentCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DestroyedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("DestroyedAtUTC");

                    b.Property<bool>("DestroyedByRoundEnd")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmplacementPlayerKills")
                        .HasColumnType("int");

                    b.Property<int>("EmplacementVehicleKills")
                        .HasColumnType("int");

                    b.Property<int>("EmplacementsBuilt")
                        .HasColumnType("int");

                    b.Property<int>("EmplacementsDestroyed")
                        .HasColumnType("int");

                    b.Property<float>("FobAngleX")
                        .HasColumnType("float");

                    b.Property<float>("FobAngleY")
                        .HasColumnType("float");

                    b.Property<float>("FobAngleZ")
                        .HasColumnType("float");

                    b.Property<string>("FobName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("FobType")
                        .IsRequired()
                        .HasColumnType("enum('Other','BunkerFob','Cache')");

                    b.Property<int>("FortificationsBuilt")
                        .HasColumnType("int");

                    b.Property<int>("FortificationsDestroyed")
                        .HasColumnType("int");

                    b.Property<ulong?>("Instigator")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("Instigator");

                    b.Property<float?>("InstigatorPositionX")
                        .HasColumnType("float");

                    b.Property<float?>("InstigatorPositionY")
                        .HasColumnType("float");

                    b.Property<float?>("InstigatorPositionZ")
                        .HasColumnType("float");

                    b.Property<ulong?>("InstigatorSessionId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("InstigatorSession");

                    b.Property<float>("PositionX")
                        .HasColumnType("float");

                    b.Property<float>("PositionY")
                        .HasColumnType("float");

                    b.Property<float>("PositionZ")
                        .HasColumnType("float");

                    b.Property<string>("PrimaryAsset")
                        .HasColumnType("char(32)");

                    b.Property<int>("RepairStationsBuilt")
                        .HasColumnType("int");

                    b.Property<int>("RepairStationsDestroyed")
                        .HasColumnType("int");

                    b.Property<string>("SecondaryAsset")
                        .HasColumnType("char(32)");

                    b.Property<ulong?>("SessionId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("Session");

                    b.Property<ulong?>("Steam64")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("Steam64");

                    b.Property<byte>("Team")
                        .HasColumnType("tinyint unsigned");

                    b.Property<bool>("Teamkilled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("TeleportCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime")
                        .HasColumnName("TimestampUTC");

                    b.HasKey("Id");

                    b.HasIndex("Instigator");

                    b.HasIndex("InstigatorSessionId");

                    b.HasIndex("SessionId");

                    b.HasIndex("Steam64");

                    b.HasIndex("Team");

                    b.ToTable("stats_fobs");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Users.GlobalBanWhitelist", b =>
                {
                    b.Property<ulong>("Steam64")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("EffectiveTime")
                        .HasColumnType("datetime")
                        .HasColumnName("EffectiveTimeUTC");

                    b.HasKey("Steam64");

                    b.ToTable("moderation_global_ban_whitelist");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Users.Permission", b =>
                {
                    b.Property<uint>("PrimaryKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("pk");

                    b.Property<bool>("IsGroup")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PermissionOrGroup")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<ulong>("Steam64")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("PrimaryKey");

                    b.HasIndex("Steam64");

                    b.ToTable("user_permissions");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Users.SteamDiscordPendingLink", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("pk");

                    b.Property<ulong?>("DiscordId")
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("ExpiryTimestamp")
                        .HasColumnType("datetime")
                        .HasColumnName("ExpiryTimestampUTC");

                    b.Property<DateTime>("StartedTimestamp")
                        .HasColumnType("datetime")
                        .HasColumnName("StartedTimestampUTC");

                    b.Property<ulong?>("Steam64")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("char(9)");

                    b.HasKey("Id");

                    b.HasIndex("DiscordId");

                    b.HasIndex("Steam64");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.ToTable("warfare_user_pending_accout_links");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Users.WarfareUserData", b =>
                {
                    b.Property<ulong>("Steam64")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("Steam64");

                    b.Property<string>("CharacterName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("CharacterName");

                    b.Property<ulong>("DiscordId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("DiscordId");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("DisplayName");

                    b.Property<DateTime?>("FirstJoined")
                        .HasColumnType("datetime")
                        .HasColumnName("FirstJoined");

                    b.Property<DateTime?>("LastJoined")
                        .HasColumnType("datetime")
                        .HasColumnName("LastJoined");

                    b.Property<DateTime?>("LastPrivacyPolicyAccepted")
                        .HasColumnType("datetime")
                        .HasColumnName("LastPrivacyPolicyAccepted");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("NickName");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasMaxLength(48)
                        .HasColumnType("varchar(48)")
                        .HasColumnName("PlayerName");

                    b.HasKey("Steam64");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Web.LoadoutPurchase", b =>
                {
                    b.Property<uint>("KitId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("CreatedKit");

                    b.Property<string>("AdminChangeRequest")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<DateTime?>("AdminChangeRequestDate")
                        .HasColumnType("datetime");

                    b.Property<ulong?>("AdminChangeRequesterId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("AdminChangeRequester");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Edit")
                        .IsRequired()
                        .HasColumnType("enum('None','EditRequested','EditAllowed','SeasonalUpdate')");

                    b.Property<DateTime>("FormModified")
                        .HasColumnType("datetime");

                    b.Property<string>("FormYaml")
                        .HasMaxLength(65535)
                        .HasColumnType("TEXT")
                        .HasColumnName("FormYaml");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<int>("LoadoutId")
                        .HasColumnType("int");

                    b.Property<bool>("Paid")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PlayerChangeRequest")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime?>("PlayerChangeRequestDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Season")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("enum('AwaitingApproval','ChangesRequested','InProgress','Completed')");

                    b.Property<ulong>("Steam64")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("Steam64");

                    b.Property<string>("StripeSessionId")
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.HasKey("KitId");

                    b.HasIndex("AdminChangeRequesterId");

                    b.HasIndex("Steam64");

                    b.ToTable("loadout_purchases");
                });

            modelBuilder.Entity("Uncreated.Warfare.Moderation.PlayerHWID", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("Id");

                    b.Property<DateTime?>("FirstLogin")
                        .HasColumnType("datetime")
                        .HasColumnName("FirstLogin");

                    b.Property<byte[]>("HWID")
                        .IsRequired()
                        .HasColumnType("binary(20)")
                        .HasColumnName("HWID");

                    b.Property<int>("Index")
                        .HasColumnType("int")
                        .HasColumnName("Index");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime")
                        .HasColumnName("LastLogin");

                    b.Property<int>("LoginCount")
                        .HasColumnType("int")
                        .HasColumnName("LoginCount");

                    b.Property<ulong>("Steam64")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("Steam64");

                    b.HasKey("Id");

                    b.HasIndex("HWID");

                    b.HasIndex("Steam64");

                    b.ToTable("hwids");
                });

            modelBuilder.Entity("Uncreated.Warfare.Moderation.PlayerIPAddress", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("Id");

                    b.Property<DateTime?>("FirstLogin")
                        .HasColumnType("datetime")
                        .HasColumnName("FirstLogin");

                    b.Property<string>("IPAddress")
                        .HasColumnType("varchar(45)")
                        .HasColumnName("Unpacked");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime")
                        .HasColumnName("LastLogin");

                    b.Property<int>("LoginCount")
                        .HasColumnType("int")
                        .HasColumnName("LoginCount");

                    b.Property<uint>("PackedIP")
                        .HasColumnType("int unsigned")
                        .HasColumnName("Packed");

                    b.Property<ulong>("Steam64")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("Steam64");

                    b.HasKey("Id");

                    b.HasIndex("PackedIP");

                    b.HasIndex("Steam64");

                    b.ToTable("ip_addresses");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Factions.Faction", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Kits.KitModel", "UnarmedKit")
                        .WithMany()
                        .HasForeignKey("UnarmedKitId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("UnarmedKit");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Factions.FactionAsset", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Factions.Faction", "Faction")
                        .WithMany("Assets")
                        .HasForeignKey("FactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faction");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Factions.FactionLocalization", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Factions.Faction", "Faction")
                        .WithMany("Translations")
                        .HasForeignKey("FactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Uncreated.Warfare.Models.Localization.LanguageInfo", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faction");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.GameData.GameRecord", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Factions.Faction", "WinnerFaction")
                        .WithMany()
                        .HasForeignKey("WinnerFactionId");

                    b.Navigation("WinnerFaction");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.GameData.SessionRecord", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Factions.Faction", "Faction")
                        .WithMany()
                        .HasForeignKey("FactionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Uncreated.Warfare.Models.GameData.GameRecord", "Game")
                        .WithMany("Sessions")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Uncreated.Warfare.Models.Kits.KitModel", "Kit")
                        .WithMany()
                        .HasForeignKey("KitId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Uncreated.Warfare.Models.Seasons.MapData", "Map")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Uncreated.Warfare.Models.GameData.SessionRecord", "NextSession")
                        .WithMany()
                        .HasForeignKey("NextSessionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Uncreated.Warfare.Models.GameData.SessionRecord", "PreviousSession")
                        .WithMany()
                        .HasForeignKey("PreviousSessionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Uncreated.Warfare.Models.Seasons.SeasonData", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Uncreated.Warfare.Models.Users.WarfareUserData", "SquadLeaderData")
                        .WithMany()
                        .HasForeignKey("SquadLeader");

                    b.HasOne("Uncreated.Warfare.Models.Users.WarfareUserData", "PlayerData")
                        .WithMany()
                        .HasForeignKey("Steam64")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Faction");

                    b.Navigation("Game");

                    b.Navigation("Kit");

                    b.Navigation("Map");

                    b.Navigation("NextSession");

                    b.Navigation("PlayerData");

                    b.Navigation("PreviousSession");

                    b.Navigation("Season");

                    b.Navigation("SquadLeaderData");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.Bundles.EliteBundle", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Factions.Faction", "Faction")
                        .WithMany()
                        .HasForeignKey("FactionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Faction");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.Bundles.KitEliteBundle", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Kits.Bundles.EliteBundle", "Bundle")
                        .WithMany("Kits")
                        .HasForeignKey("BundleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Uncreated.Warfare.Models.Kits.KitModel", "Kit")
                        .WithMany("Bundles")
                        .HasForeignKey("KitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bundle");

                    b.Navigation("Kit");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.KitAccess", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Kits.KitModel", "Kit")
                        .WithMany("Access")
                        .HasForeignKey("KitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Uncreated.Warfare.Models.Users.WarfareUserData", "PlayerData")
                        .WithMany()
                        .HasForeignKey("Steam64")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kit");

                    b.Navigation("PlayerData");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.KitDelay", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Kits.KitModel", null)
                        .WithMany("Delays")
                        .HasForeignKey("KitModelPrimaryKey");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.KitFavorite", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Kits.KitModel", "Kit")
                        .WithMany("Favorites")
                        .HasForeignKey("KitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Uncreated.Warfare.Models.Users.WarfareUserData", "PlayerData")
                        .WithMany()
                        .HasForeignKey("Steam64")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kit");

                    b.Navigation("PlayerData");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.KitFilteredFaction", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Factions.Faction", null)
                        .WithMany()
                        .HasForeignKey("FactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Uncreated.Warfare.Models.Kits.KitModel", null)
                        .WithMany("FactionFilter")
                        .HasForeignKey("KitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.KitFilteredMap", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Kits.KitModel", null)
                        .WithMany("MapFilter")
                        .HasForeignKey("KitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.KitHotkey", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Kits.KitModel", "Kit")
                        .WithMany()
                        .HasForeignKey("KitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Uncreated.Warfare.Models.Users.WarfareUserData", "PlayerData")
                        .WithMany()
                        .HasForeignKey("Steam64")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kit");

                    b.Navigation("PlayerData");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.KitItemModel", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Kits.KitModel", null)
                        .WithMany("Items")
                        .HasForeignKey("KitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.KitLayoutTransformation", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Kits.KitModel", null)
                        .WithMany()
                        .HasForeignKey("KitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Uncreated.Warfare.Models.Users.WarfareUserData", "PlayerData")
                        .WithMany()
                        .HasForeignKey("Steam64")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerData");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.KitModel", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Factions.Faction", "Faction")
                        .WithMany()
                        .HasForeignKey("FactionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Faction");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.KitSkillset", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Kits.KitModel", null)
                        .WithMany("Skillsets")
                        .HasForeignKey("KitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.KitTranslation", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Kits.KitModel", null)
                        .WithMany("Translations")
                        .HasForeignKey("KitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.KitUnlockRequirement", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Kits.KitModel", null)
                        .WithMany("UnlockRequirements")
                        .HasForeignKey("KitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Localization.LanguageAlias", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Localization.LanguageInfo", "Language")
                        .WithMany("Aliases")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Localization.LanguageContributor", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Users.WarfareUserData", "ContributorData")
                        .WithMany()
                        .HasForeignKey("Contributor")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Uncreated.Warfare.Models.Localization.LanguageInfo", "Language")
                        .WithMany("Contributors")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContributorData");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Localization.LanguageCulture", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Localization.LanguageInfo", "Language")
                        .WithMany("SupportedCultures")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Localization.LanguagePreferences", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Localization.LanguageInfo", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Uncreated.Warfare.Models.Users.WarfareUserData", "PlayerData")
                        .WithMany()
                        .HasForeignKey("Steam64")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("PlayerData");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Seasons.MapData", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Seasons.SeasonData", "SeasonReleased")
                        .WithMany("Maps")
                        .HasForeignKey("ReleasedSeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Uncreated.Warfare.Models.Factions.Faction", "Team1Faction")
                        .WithMany()
                        .HasForeignKey("Team1FactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Uncreated.Warfare.Models.Factions.Faction", "Team2Faction")
                        .WithMany()
                        .HasForeignKey("Team2FactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SeasonReleased");

                    b.Navigation("Team1Faction");

                    b.Navigation("Team2Faction");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Seasons.MapWorkshopDependency", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Seasons.MapData", "Map")
                        .WithMany("Dependencies")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Map");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Stats.AidRecord", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Users.WarfareUserData", "InstigatorData")
                        .WithMany()
                        .HasForeignKey("Instigator")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Uncreated.Warfare.Models.GameData.SessionRecord", "InstigatorSession")
                        .WithMany()
                        .HasForeignKey("InstigatorSessionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Uncreated.Warfare.Models.GameData.SessionRecord", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Uncreated.Warfare.Models.Users.WarfareUserData", "PlayerData")
                        .WithMany()
                        .HasForeignKey("Steam64")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("InstigatorData");

                    b.Navigation("InstigatorSession");

                    b.Navigation("PlayerData");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Stats.DamageRecord", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Users.WarfareUserData", "InstigatorData")
                        .WithMany()
                        .HasForeignKey("Instigator")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Uncreated.Warfare.Models.GameData.SessionRecord", "InstigatorSession")
                        .WithMany()
                        .HasForeignKey("InstigatorSessionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Uncreated.Warfare.Models.Users.WarfareUserData", "RelatedPlayerData")
                        .WithMany()
                        .HasForeignKey("RelatedPlayer")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Uncreated.Warfare.Models.GameData.SessionRecord", "RelatedPlayerSession")
                        .WithMany()
                        .HasForeignKey("RelatedPlayerSessionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Uncreated.Warfare.Models.GameData.SessionRecord", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Uncreated.Warfare.Models.Users.WarfareUserData", "PlayerData")
                        .WithMany()
                        .HasForeignKey("Steam64")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("InstigatorData");

                    b.Navigation("InstigatorSession");

                    b.Navigation("PlayerData");

                    b.Navigation("RelatedPlayerData");

                    b.Navigation("RelatedPlayerSession");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Stats.DeathRecord", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Users.WarfareUserData", "InstigatorData")
                        .WithMany()
                        .HasForeignKey("Instigator")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Uncreated.Warfare.Models.GameData.SessionRecord", "InstigatorSession")
                        .WithMany()
                        .HasForeignKey("InstigatorSessionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Uncreated.Warfare.Models.Stats.DamageRecord", "KillShot")
                        .WithOne()
                        .HasForeignKey("Uncreated.Warfare.Models.Stats.DeathRecord", "KillShotId");

                    b.HasOne("Uncreated.Warfare.Models.Users.WarfareUserData", "RelatedPlayerData")
                        .WithMany()
                        .HasForeignKey("RelatedPlayer")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Uncreated.Warfare.Models.GameData.SessionRecord", "RelatedPlayerSession")
                        .WithMany()
                        .HasForeignKey("RelatedPlayerSessionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Uncreated.Warfare.Models.GameData.SessionRecord", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Uncreated.Warfare.Models.Users.WarfareUserData", "PlayerData")
                        .WithMany()
                        .HasForeignKey("Steam64")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("InstigatorData");

                    b.Navigation("InstigatorSession");

                    b.Navigation("KillShot");

                    b.Navigation("PlayerData");

                    b.Navigation("RelatedPlayerData");

                    b.Navigation("RelatedPlayerSession");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Stats.FobItemBuilderRecord", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Stats.FobItemRecord", "FobItem")
                        .WithMany("Builders")
                        .HasForeignKey("FobItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Uncreated.Warfare.Models.GameData.SessionRecord", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Uncreated.Warfare.Models.Users.WarfareUserData", "PlayerData")
                        .WithMany()
                        .HasForeignKey("Steam64")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("FobItem");

                    b.Navigation("PlayerData");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Stats.FobItemRecord", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Stats.FobRecord", "Fob")
                        .WithMany("Items")
                        .HasForeignKey("FobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Uncreated.Warfare.Models.Users.WarfareUserData", "InstigatorData")
                        .WithMany()
                        .HasForeignKey("Instigator")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Uncreated.Warfare.Models.GameData.SessionRecord", "InstigatorSession")
                        .WithMany()
                        .HasForeignKey("InstigatorSessionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Uncreated.Warfare.Models.GameData.SessionRecord", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Uncreated.Warfare.Models.Users.WarfareUserData", "PlayerData")
                        .WithMany()
                        .HasForeignKey("Steam64")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Fob");

                    b.Navigation("InstigatorData");

                    b.Navigation("InstigatorSession");

                    b.Navigation("PlayerData");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Stats.FobRecord", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Users.WarfareUserData", "InstigatorData")
                        .WithMany()
                        .HasForeignKey("Instigator")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Uncreated.Warfare.Models.GameData.SessionRecord", "InstigatorSession")
                        .WithMany()
                        .HasForeignKey("InstigatorSessionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Uncreated.Warfare.Models.GameData.SessionRecord", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Uncreated.Warfare.Models.Users.WarfareUserData", "PlayerData")
                        .WithMany()
                        .HasForeignKey("Steam64")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("InstigatorData");

                    b.Navigation("InstigatorSession");

                    b.Navigation("PlayerData");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Web.LoadoutPurchase", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Users.WarfareUserData", "AdminChangeRequester")
                        .WithMany()
                        .HasForeignKey("AdminChangeRequesterId");

                    b.HasOne("Uncreated.Warfare.Models.Kits.KitModel", "Kit")
                        .WithMany()
                        .HasForeignKey("KitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Uncreated.Warfare.Models.Users.WarfareUserData", "User")
                        .WithMany()
                        .HasForeignKey("Steam64")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdminChangeRequester");

                    b.Navigation("Kit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Uncreated.Warfare.Moderation.PlayerHWID", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Users.WarfareUserData", "PlayerData")
                        .WithMany("HWIDs")
                        .HasForeignKey("Steam64")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PlayerData");
                });

            modelBuilder.Entity("Uncreated.Warfare.Moderation.PlayerIPAddress", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Users.WarfareUserData", "PlayerData")
                        .WithMany("IPAddresses")
                        .HasForeignKey("Steam64")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PlayerData");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Factions.Faction", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.GameData.GameRecord", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.Bundles.EliteBundle", b =>
                {
                    b.Navigation("Kits");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.KitModel", b =>
                {
                    b.Navigation("Access");

                    b.Navigation("Bundles");

                    b.Navigation("Delays");

                    b.Navigation("FactionFilter");

                    b.Navigation("Favorites");

                    b.Navigation("Items");

                    b.Navigation("MapFilter");

                    b.Navigation("Skillsets");

                    b.Navigation("Translations");

                    b.Navigation("UnlockRequirements");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Localization.LanguageInfo", b =>
                {
                    b.Navigation("Aliases");

                    b.Navigation("Contributors");

                    b.Navigation("SupportedCultures");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Seasons.MapData", b =>
                {
                    b.Navigation("Dependencies");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Seasons.SeasonData", b =>
                {
                    b.Navigation("Maps");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Stats.FobItemRecord", b =>
                {
                    b.Navigation("Builders");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Stats.FobRecord", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Users.WarfareUserData", b =>
                {
                    b.Navigation("HWIDs");

                    b.Navigation("IPAddresses");
                });
#pragma warning restore 612, 618
        }
    }
}
